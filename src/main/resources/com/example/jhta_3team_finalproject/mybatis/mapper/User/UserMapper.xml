<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.jhta_3team_finalproject.mybatis.mapper.User.UserMapper">

    <select id="getUserId" resultType="User">
        SELECT *
        FROM user
        WHERE user_id = #{userId}
    </select>

    <select id="departmentPositionInfo" resultType="User">
        select (select user_departments.department_name
                from user_departments
                where department_id = #{department_id}) as departmentName,
               (select user_positions.position_name
                from user_positions
                where position_id = #{position_id})     as positionName
        from dual
    </select>

    <select id="getEmployee" resultType="User" parameterType="int">
        SELECT u.*, d.department_name AS departmentName, p.position_name AS positionName
        FROM user u
                 JOIN user_departments d ON u.department_id = d.department_id
                 JOIN user_positions p ON u.position_id = p.position_id
        WHERE u.user_num = #{userNum}
    </select>

    <insert id="join">
        insert into user
        (user_num, user_id, user_password, user_name, user_email, user_phone_number, user_gender)
        values (#{userNum}, #{userId}, #{userPassword}, #{userName}, #{userEmail}, #{userPhoneNumber}, #{userGender})
    </insert>

    <update id="userupdate">
        UPDATE user
        SET user_name            = #{userName},
            user_email           = #{userEmail},
            user_phone_number    = #{userPhoneNumber},
            user_gender          = #{userGender},
            user_profile_picture = #{userProfilePicture}
        WHERE user_num = #{userNum}
    </update>

    <!-- 사용자 정보 추가 -->
    <insert id="insert">
        insert into user
        (user_num, user_id, user_password, user_email, user_name, user_phone_number, user_gender, user_profile_picture,
         user_created_at, user_updated_at, user_auth)
        values (#{userNum}, #{userId}, #{userPassword}, #{userEmail}, #{userName}, #{userPhoneNumber}, #{userGender},
                #{userProfilePicture}, NOW(), NOW(), #{userAuth})
    </insert>

    <select id="getListCount" resultType="int">  <!-- 페이징 -->
        select count(*) from user
    </select>

    <!-- 사용자 승인 및 부서, 직책 설정 -->
    <update id="approveUserWithDepartmentAndPosition" parameterType="User">
        UPDATE user
        SET user_is_approved = 1,
            department_id    = #{departmentId},
            position_id      = #{positionId},
            user_auth        = CASE
                                   WHEN #{positionId} = 0 THEN 'ROLE_NEWBIE' -- 신입사원
                                   WHEN #{positionId} = 1 THEN 'ROLE_MEMBER' -- 사원
                                   WHEN #{positionId} = 2 THEN 'ROLE_TEAM' -- 팀장
                                   WHEN #{positionId} = 3 THEN 'ROLE_HEAD' -- 부장
                                   WHEN #{positionId} = 4 THEN 'ROLE_SUB_MASTER'-- 이사
                                   WHEN #{positionId} = 5 THEN 'ROLE_MASTER' -- 대표
                                   ELSE 'ROLE_NEWBIE' -- 기본값
                END,
            user_department  = #{userDepartment}
        WHERE user_num = #{userNum}
    </update>

    <!-- 사용자 승인 -->
    <update id="approveUser">
        UPDATE user
        SET user_is_approved = 1
        WHERE user_num = #{userNum}
    </update>

    <!-- 사용자 거절 -->
    <update id="rejectUser">
        UPDATE user
        SET user_is_approved = 0
        WHERE user_num = #{userNum}
    </update>

    <!-- 모든 신규 사원 정보( 요청)-->
    <select id="findAllRequests"  parameterType="map">
        SELECT *
        FROM user
    </select>

    <!-- 승인된 요청들 -->
    <select id="getApprovedRequests" resultType="User">
        SELECT *
        FROM user
        WHERE user_is_approved = 1
    </select>

    <!-- 거절된 요청들 -->
    <select id="getRejectedRequests" resultType="User">
        SELECT *
        FROM user
        WHERE user_is_approved = 0
    </select>

    <select id="getUsersFilter" parameterType="map">
        select u.user_num,
        u.user_name,
        u.user_created_at,
        u.user_is_approved,
        d.department_name,
        p.position_name
        from user u
        join user_departments d on u.department_id = d.department_id
        join user_positions p on u.position_id = p.position_id
        <where>
            <if test="params.user_is_approved != 0">
                u.user_is_approved = #{params.user_is_approved}
            </if>
        </where>
        ORDER BY u.user_num;
    </select>

    <!-- 부서와 직급에 해당하는 인물넘버 검색-->
    <select id="getUsersByDepartmentAndPosition" resultType="int" parameterType="map">
        SELECT user_num
        FROM user
        WHERE department_id = #{departmentId} AND position_id = #{positionId}
    </select>

    <!--부서에 소속한 인물 검색-->
    <select id="getEmployeeListByDepartment" resultType="User">
        SELECT *
        FROM user
        WHERE department_id = #{departmentId}
    </select>
</mapper>