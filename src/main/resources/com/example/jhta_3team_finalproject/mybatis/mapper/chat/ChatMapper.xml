<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.jhta_3team_finalproject.mybatis.mapper.chat.ChatMapper">
    <!-- 채팅 추가 -->
    <insert id="createMessage" parameterType="chatMessage">
        INSERT INTO chat_message(message_num, chat_room_num, sender_id, message_content, read_count, file_url, file_origin_name, send_time)
        VALUES (NULL, #{chatRoomNum}, #{senderId}, #{messageContent}, #{readCount}, #{fileUrl}, #{fileOriginName}, NOW())
    </insert>

    <!-- 2024-06-08, 채팅 메시지 추가 후 마지막 메시지의 정보를 다시 가져와야 함. -->
    <select id="lastMessage" parameterType="chatMessage">
        select cm.*, u.user_id as user_id, u.user_name as user_name, u.user_profile_picture as user_profile_picture
        FROM chat_message cm
        JOIN user u
        ON cm.sender_id = u.user_id
        WHERE message_num = (SELECT MAX(message_num) FROM chat_message)
    </select>

    <!-- 채팅방의 채팅 기록 가져오기, 유저 기준으로도 추가 예정 -->
    <select id="searchMessages" resultType="chatMessage">
        SELECT *
        FROM chat_message
        WHERE chat_room_num = #{chatRoomNum}
        ORDER BY message_num ASC
    </select>

    <!-- 채팅방의 채팅 기록 1일씩 가져오기 -->
    <!--    2024-06-05, ROLLUP을 통한 타임 스탬프 구현-->
    <select id="redisSearchMessages" resultType="chatMessage">
        SELECT cm.*, u.user_id as user_id, u.user_name as user_name, u.user_profile_picture as user_profile_picture, DATE(send_time) as time_stamp
        FROM chat_message cm
        JOIN user u
        ON cm.sender_id = u.user_id
        WHERE  chat_room_num = #{chatRoomNum}
        AND DATE_FORMAT(send_time, '%Y-%m-%d') = #{dateStr}
        GROUP BY message_num WITH ROLLUP
        ORDER BY time_stamp, message_num ASC
    </select>

    <!-- 2024-06-04, 채팅 메시지에서 파일을 업로드할 경우, 해당 내용의 URL을 S3 버킷의 URL로 업데이트-->
    <update id="updateMsgImageUrl">
        UPDATE chat_message SET file_url = #{s3url} WHERE file_url = #{fileUrl}
    </update>

    <!-- 2024-06-07, URL이 업데이트된 경우 redis에서도 업데이트를 해야 하므로 이전 데이터를 검색하여 데이터를 임시 저장합니다. -->
    <select id="searchOldMessage" resultType="chatMessage">
        SELECT *
        FROM chat_message
        WHERE file_url = #{fileUrl}
    </select>

    <!-- 2024-06-07, URL이 업데이트된 경우 redis에 새로운 메시지를 적용합니다. -->
    <select id="searchNewMessage" resultType="chatMessage">
        SELECT *
        FROM chat_message
        WHERE message_num = #{messageNum}
    </select>

    <!-- 2024-06-10, 채팅방 만들기 -->
    <insert id="createChatRoom" parameterType="chatRoom">
        INSERT INTO chat_room(chat_room_num, room_name, chat_session_id, room_create_date)
        VALUES (NULL, #{roomName}, #{chatSessionId}, NOW())
    </insert>

    <!-- 2024-06-10, 마지막으로 생성된 채팅방 번호를 가져와서 참여 관계를 나타내는 테이블에서 사용 -->
    <select id="lastChatRoom" parameterType="chatRoom">
        SELECT *
        FROM chat_room
        WHERE chat_room_num = (SELECT MAX(chat_room_num) FROM chat_room);
    </select>

    <!-- 2024-06-10, 채팅방 생성 시 해당 채팅방에 참여 관계를 나타내는 테이블에 정보를 입력 -->
    <insert id="addChatParticipate" parameterType="chatParticipate">
        INSERT INTO chat_participate(chat_room_num, chat_user_id, chat_entry_time, chat_visit_time, chat_room_type)
        VALUES (#{chatRoomNum}, #{chatUserId}, NOW(), NOW(), 'multi')
    </insert>

    <!-- 2024-06-13, 사원 리스트 클릭 시 해당 사원과의 1대1 방이 있는지 체크하기 -->
    <select id="isp2pChatRoom">
        SELECT IFNULL(MAX(cp.chat_room_num), -1) AS chat_room_num
        FROM(SELECT chat_room_num
             FROM chat_participate
             WHERE chat_user_id = #{chatCounterpartId} AND chat_room_type = 'p2p'
             INTERSECT
             SELECT chat_room_num
             FROM chat_participate
             WHERE chat_user_id = #{chatUserId} AND chat_room_type = 'p2p') cp
    </select>

    <!-- 2024-06-14, 1대1 채팅방 만들기 (P2P) -->
    <insert id="createp2pChatRoom" parameterType="chatRoom">
        INSERT INTO chat_room(chat_room_num, room_name, chat_session_id, room_create_date)
        VALUES (NULL, #{roomName}, #{chatSessionId}, NOW())
    </insert>

    <!-- 2024-06-14, 1대1 채팅방 만들기에서 마지막으로 생성된 채팅방 번호를 가져와서 참여 관계를 나타내는 테이블에서 사용 -->
    <select id="lastChatRoomNum" parameterType="chatRoom">
        SELECT MAX(chat_room_num)
        FROM chat_room
    </select>

    <!-- 2024-06-14, 채팅방 생성 시 해당 채팅방에 참여 관계를 나타내는 테이블에 정보를 입력 -->
    <insert id="addp2pChatParticipate" parameterType="chatParticipate">
        INSERT INTO chat_participate(chat_room_num, chat_user_id, chat_entry_time, chat_visit_time, chat_room_type)
        VALUES (#{chatRoomNum}, #{chatUserId}, NOW(), NOW(), 'p2p')
    </insert>

    <!-- 2024-06-12, 참가 중인 채팅방에서 나가기 -->
    <delete id="participateExitChatRoom">
        DELETE FROM chat_participate
        WHERE chat_room_num = #{chatRoomNum}
        AND chat_user_id = #{chatUserId}
    </delete>

    <!-- 2024-06-12, 해당 방에 참가 인원이 있는지 확인 -->
    <select id="isChatRoomParticipate">
        SELECT COUNT(*)
        FROM chat_participate
        WHERE chat_room_num = #{chatRoomNum}
    </select>

    <!-- 2024-06-14, 채팅방의 참가 인원 리스트를 가져옵니다. -->
    <select id="chatRoomParticipateList" parameterType="user">
        SELECT chat_user_id as user_id
        FROM chat_participate
        WHERE chat_room_num = #{chatRoomNum}
        AND chat_user_id not in (#{chatSessionId})
    </select>

    <!-- 2024-06-12, 해당 방에 참가 인원이 없는 경우 해당 방을 삭제 -->
    <delete id="deleteChatRoom">
        DELETE FROM chat_room
        WHERE chat_room_num = #{chatRoomNum}
    </delete>

    <!-- 2024-06-12, 채팅 사원 전체 리스트 가져오기 -->
    <select id="chatUserList" resultType="user">
        SELECT user_id, user_name, user_profile_picture, user_chat_status_msg, user_email, ud.department_name
        FROM user u
        JOIN user_departments ud
        ON u.department_id = ud.department_id
        WHERE user_id NOT IN (#{chatUserId});
    </select>

    <!-- 2024-06-12, 채팅 자신의 유저 리스트 가져오기 -->
    <select id="chatUserProfile" resultType="user">
        SELECT user_id, user_name, user_profile_picture, user_chat_status_msg, user_email, user_phone_number, ud.department_name
        FROM user u
        JOIN user_departments ud
        ON u.department_id = ud.department_id
        WHERE user_id IN (#{chatUserId});
    </select>

    <!-- 2024-06-10, 방목록 가져오기 -> 마지막 메시지와 방 정보 -->
    <select id="searchRoomUser" parameterType="chatRoom" resultType="chatParticipate">
        SELECT *, GREATEST(IFNULL(cm.send_time, cr.room_create_date), cr.room_create_date) AS last_send_time
        FROM chat_participate cp
        LEFT JOIN(
                  SELECT *
                  FROM chat_message
                  WHERE message_num IN (SELECT MAX(message_num)
                                        FROM chat_message
                                        GROUP BY chat_room_num)
                 ) cm
        ON cp.chat_room_num = cm.chat_room_num
        JOIN(
            SELECT *
            FROM chat_room
        ) cr
        ON cp.chat_room_num = cr.chat_room_num
        WHERE chat_user_id = #{chatSessionId}
        ORDER BY last_send_time DESC
    </select>

    <!-- 2024-06-10, 방 생성 시 해당 방 정보 가져오기 -->
    <select id="searchLastRoomUser" parameterType="chatRoom" resultType="chatParticipate">
        SELECT *, GREATEST(IFNULL(cm.send_time, cr.room_create_date), cr.room_create_date) AS last_send_time
        FROM chat_participate cp
        LEFT JOIN(
            SELECT *
            FROM chat_message
            WHERE message_num IN (SELECT MAX(message_num)
                                  FROM chat_message
                                  GROUP BY chat_room_num)
        ) cm
        ON cp.chat_room_num = cm.chat_room_num
        JOIN(
            SELECT *
            FROM chat_room
        ) cr
                     ON cp.chat_room_num = cr.chat_room_num
        WHERE chat_user_id = #{chatSessionId}
        AND cp.chat_room_num = (SELECT MAX(chat_room_num) FROM chat_room)
        ORDER BY last_send_time DESC
    </select>

    <!-- 2024-06-10, 안 읽은 메시지 수 구해오기 -->
    <select id="getUnreadMessage" parameterType="chatParticipate">
        SELECT COUNT(*)
        FROM chat_message
        WHERE send_time BETWEEN (
            SELECT chat_visit_time
            FROM chat_participate
            WHERE chat_room_num = #{chatRoomNum}
              AND chat_user_id = #{chatUserId}
        ) AND NOW()
          AND chat_room_num = #{chatRoomNum}
    </select>

    <!-- 채팅 프로필 상태 메시지 변경 -->
    <update id="chatUserProfileMsgUpdate">
        UPDATE user
        SET user_chat_status_msg = #{userChatStatusMsg}
        <where>
            user_id = #{userId}
        </where>
    </update>

    <!-- 방목록 가져오기 - 관리자용 -->
    <select id="searchRoom" resultType="chatRoom">
        SELECT *
        FROM chat_room
        ORDER BY chat_room_num DESC
    </select>

    <!-- 2024-06-13, 채팅방 클릭 시 해당 채팅방 정보 가져오기 -->
    <select id="getChatRoomInfo">
        SELECT room_name
        FROM chat_room
        WHERE chat_room_num = #{chatRoomNum}
    </select>

    <!-- 2024-06-13, 채팅방 클릭 시 해당 채팅방 유저 인원 수 가져오기 -->
    <select id="getChatRoomUserCount">
        SELECT COUNT(*)
        FROM chat_participate
        WHERE chat_room_num = #{chatRoomNum}
    </select>

    <!-- 2024-06-13, 채팅방 클릭 시 해당 채팅방 유저 리스트 가져오기 -->
    <select id="getChatRoomUserList" parameterType="chatParticipate">
        SELECT user_id, user_name, user_profile_picture, user_email
        FROM chat_participate cp
        JOIN user u
        ON u.user_id = cp.chat_user_id
        WHERE chat_room_num = #{chatRoomNum}
        AND chat_user_id != #{chatUserId}
    </select>

    <!-- 2024-06-13, 채팅방에 없는 유저 리스트 가져오기 (초대할 수 있는 유저 리스트) -->
    <select id="getChatRoomCanInviteUserList" parameterType="user">
        SELECT user_id, user_name, user_profile_picture, user_email
        FROM user
        WHERE user_id NOT IN (SELECT chat_user_id
                              FROM chat_participate
                              WHERE chat_room_num = #{chatRoomNum});
    </select>
</mapper>