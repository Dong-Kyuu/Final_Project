<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.jhta_3team_finalproject.mybatis.mapper.chat.ChatMapper">
    <!-- 채팅 추가 -->
    <insert id="createMessage" parameterType="chatMessage">
        <!--        <selectKey resultType="int" order="BEFORE" keyProperty="sender_num">-->
        <!--            SELECT num FROM users WHERE id = #{senderId}-->
        <!--        </selectKey>-->
        INSERT INTO chat_message(message_num, chat_room_num, sender_id, message_content, read_count, file_url, file_origin_name, send_time)
        VALUES (NULL, #{chatRoomNum}, #{senderId}, #{messageContent}, #{readCount}, #{fileUrl}, #{fileOriginName}, now())
    </insert>

    <!-- 2024-06-08, 채팅 메시지 추가 후 마지막 메시지의 정보를 다시 가져와야 함. -->
    <select id="lastMessage" parameterType="chatMessage">
        select *
        from chat_message
        where message_num = (select max(message_num) from chat_message)
    </select>

    <!-- 채팅방의 채팅 기록 가져오기, 유저 기준으로도 추가 예정 -->
    <select id="searchMessages" resultType="chatMessage">
        SELECT *
        FROM chat_message
        WHERE chat_room_num = #{chatRoomNum}
        ORDER BY message_num ASC
    </select>

    <!-- 채팅방의 채팅 기록 1일씩 가져오기 -->
    <select id="redisSearchMessages" resultType="chatMessage">
        SELECT *
        FROM chat_message
        WHERE chat_room_num = #{chatRoomNum}
        AND DATE_FORMAT(send_time, '%Y-%m-%d') = #{dateStr}
        ORDER BY message_num ASC
    </select>
<!--    2024-06-05, ROLLUP을 통한 타임 스탬프 구현-->
<!--    SELECT *, DATE(send_time) as chat_time_stamp-->
<!--    FROM chat_message-->
<!--    WHERE DATE_FORMAT(send_time, '%Y-%m-%d') = '2024-06-04'-->
<!--    group by message_num WITH ROLLUP;-->


    <!-- 2024-06-04, 채팅 메시지에서 파일을 업로드할 경우, 해당 내용의 URL을 S3 버킷의 URL로 업데이트-->
    <update id="updateMsgImageUrl">
        UPDATE chat_message SET file_url = #{s3url} where file_url = #{fileUrl}
    </update>

    <!-- 2024-06-07, URL이 업데이트된 경우 redis에서도 업데이트를 해야 하므로 이전 데이터를 검색하여 데이터를 임시 저장합니다. -->
    <select id="searchOldMessage" resultType="chatMessage">
        SELECT *
        FROM chat_message
        WHERE where file_url = #{fileUrl}
    </select>

    <!-- 2024-06-07, URL이 업데이트된 경우 redis에 새로운 메시지를 적용합니다. -->
    <select id="searchNewMessage" resultType="chatMessage">
        SELECT *
        FROM chat_message
        WHERE where message_num = #{messageNum}
    </select>

    <!-- 채팅방 만들기 -->
    <insert id="createChatRoom" parameterType="chatRoom">
        <!--        <selectKey resultType="int" order="BEFORE" keyProperty="chat_room_num">-->
        <!--            SELECT IFNULL(MAX(chat_room_num),0)+1 FROM com_chat_room-->
        <!--        </selectKey>-->
        INSERT INTO chat_room(chat_room_num, room_name, chat_session_id, room_create_date)
        VALUES (NULL, #{roomName}, #{chatSessionId}, now())
    </insert>

    <!-- 채팅 사원 전체 리스트 가져오기 -->
    <select id="chatUserList" resultType="user">
        SELECT user_id, user_name, user_department, user_profile_picture, user_chat_status_msg FROM user WHERE user_id NOT IN (#{chatUserId});
    </select>

    <!-- 채팅 자신의 유저 리스트 가져오기 -->
    <select id="chatUserProfile" resultType="user">
        SELECT user_id, user_name, user_department, user_profile_picture, user_chat_status_msg, user_email, user_phone_number FROM user WHERE user_id IN (#{chatUserId});
    </select>

    <!-- 채팅 프로필 상태 메시지 변경 -->
    <update id="chatUserProfileMsgUpdate">
        UPDATE user
        SET user_chat_status_msg = #{userChatStatusMsg}
        <where>
            user_id = #{userId}
        </where>
    </update>

    <!-- 방목록 가져오기 -->
    <select id="searchRoom" resultType="chatRoom">
        select *
        from chat_room
        ORDER BY chat_room_num ASC
    </select>

    <!-- 방목록 가져오기 - 유저 기준 -->
    <select id="searchRoomUser" parameterType="chatRoom" resultType="chatRoom">
        SELECT *
        FROM chat_room
        WHERE chat_session_id = #{chatSessionId}
    </select>

    <!-- 2024-06-09, 해당 방의 마지막 메시지와 마지막 시간을 가져와서 채팅방 정보와 Join  -->
    <!--    SELECT a.*, b.*-->
    <!--    FROM chat_room a-->
    <!--    JOIN-->
    <!--    (-->
    <!--    SELECT MAX(send_time), MAX(message_num), chat_room_num-->
    <!--    FROM chat_message-->
    <!--    WHERE chat_room_num in (-->
    <!--    SELECT chat_room_num-->
    <!--    FROM chat_room-->
    <!--    WHERE chat_session_id = 'admin'-->
    <!--    )-->
    <!--    GROUP BY chat_room_num-->
    <!--    ) b-->
    <!--    ON a.chat_room_num = b.chat_room_num-->
    <!--    WHERE chat_session_id = 'admin';-->

    <!-- 2024-06-09, 채팅방들의 메시지를 그룹화하여 그 중 가장 마지막 메시지의 정보를 MAX 함수로 가져옴 -->
    <!--    select MAX(send_time), MAX(message_num), chat_room_num-->
    <!--    from chat_message-->
    <!--    where chat_room_num in (-->
    <!--    select chat_room_num-->
    <!--    from chat_room-->
    <!--    where chat_session_id = 'admin'-->
    <!--    )-->
    <!--    group by chat_room_num;-->
</mapper>