pipeline {
    environment { 
       // dockerhub : jenkins에 등록해 놓은 docker hub credentials 이름      
        DOCKERHUB_CREDENTIALS = credentials('dockerhub') 
        TARGET_HOST = "ubuntu@43.203.196.38"  //@뒤에는 배포용 public 아이피 

    }
    agent any

    stages {
        stage('Git Pull') {
            steps {
                 // Get some code from a GitHub repository
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/Dong-Kyuu/Final_Project.git'

            }
            post {
                success { 
                    sh 'echo "Successfully Cloned Repository"'
                }
                failure {
                    sh 'echo "Fail Cloned Repository"'
                    exit 1
                }
            }    
        }

         //clone 받은 프로젝트 안의 Spring10_Security_War 디렉토리에서 stage 실행
        stage('Build') {
            steps {
                sh "chmod +x gradlew"  // gradlew 파일에 실행 권한 부여
                sh "./gradlew clean build -x test"
                  
            }
            post {
                success {
                    echo 'maven build success'
                }

                failure {
                    echo 'maven build failed'
                    exit 1
                }
            } 

        }

        stage('Dockerizing'){
            steps{
                
                    sh 'echo " Image Bulid Start"'
                    sh 'docker build . -t $DOCKERHUB_CREDENTIALS_USR/security:$BUILD_NUMBER'  //예) 빌드 번호가 10번인 경우      도커허브_username/security:10  이름의 이미지 생성
                    sh 'docker build . -t $DOCKERHUB_CREDENTIALS_USR/security:latest'                          // 도커허브_username/security:latest 이름의 이미지 생성
                    sh 'docker build . -t $DOCKERHUB_CREDENTIALS_USR/redis:latest'                          // 도커허브_username/redis:latest 이름의 이미지 생성

            }
                post {
                    success {
                        sh 'echo "Bulid Docker Image Success"'
                    }

                    failure {
                        sh 'echo "Bulid Docker Image Fail"'
                        exit 1
                    }
                }
        }
    
        stage('Login'){
            steps{
               //도커 허브에 로그인
                sh 'docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW'  
                
            }
            
            post {
                success {
                    sh 'echo "Docker Login Success"'
                }

                failure {
                    sh 'echo "Docker Login Fail"'
                    exit 1
                }
            }
        }

        stage('Docker hub push'){
            steps{
                sh 'echo " docker hub push"'
                sh 'docker push  $DOCKERHUB_CREDENTIALS_USR/security:$BUILD_NUMBER'   
                sh 'docker push  $DOCKERHUB_CREDENTIALS_USR/security:latest'
                sh 'docker push  $DOCKERHUB_CREDENTIALS_USR/redis:latest'
            }
            post {
                success {
                    sh 'echo "Docker hub push Success"'
                }

                failure {
                    sh 'echo "Docker hub push Fail"'
                    exit 1
                }
            }
        }    

     stage('Cleaning up'){
            steps{
                sh 'echo " docker image rmi"'
                sh "docker rmi $DOCKERHUB_CREDENTIALS_USR/security:$BUILD_NUMBER" // docker image 제거
                sh "docker rmi $DOCKERHUB_CREDENTIALS_USR/security:latest"              // docker image 제거
                sh "docker rmi $DOCKERHUB_CREDENTIALS_USR/redis:latest"
            }
            post {
                success {
                    sh 'echo " image rmi Success"'
                }

                failure {
                    sh 'echo " image rmi Fail"'
                    exit 1
                }
            }
        }

   stage('multiline ssh') {
            steps {        
                sshagent (credentials: ['MBTI']) {
                sh """
                    ssh -o StrictHostKeyChecking=no ${TARGET_HOST} '
                    sudo docker-compose down --rmi all
                    sudo docker-compose up -d
                    sudo docker-compose up -f docker-compose-redis.yml -d
                    '
                """
                }
           }
     }


     }//stages
}
